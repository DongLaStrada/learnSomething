package common

import (
	"crypto/rand"
	"errors"
)

var LOG = getLog()
var EXP = getExp()

func getLog() []byte {
	log := []byte{255, 0, 25, 1, 50, 2, 26, 198, 75, 199, 27, 104, 51, 238, 223, 3, 100, 4, 224, 14, 52, 141, 129, 239, 76, 113, 8, 200, 248, 105, 28, 193, 125, 194, 29, 181, 249, 185, 39, 106, 77, 228, 166, 114, 154, 201, 9, 120, 101, 47, 138, 5, 33, 15, 225, 36, 18, 240, 130, 69, 53, 147, 218, 142, 150, 143, 219, 189, 54, 208, 206, 148, 19, 92, 210, 241, 64, 70, 131, 56, 102, 221, 253, 48, 191, 6, 139, 98, 179, 37, 226, 152, 34, 136, 145, 16, 126, 110, 72, 195, 163, 182, 30, 66, 58, 107, 40, 84, 250, 133, 61, 186, 43, 121, 10, 21, 155, 159, 94, 202, 78, 212, 172, 229, 243, 115, 167, 87, 175, 88, 168, 80, 244, 234, 214, 116, 79, 174, 233, 213, 231, 230, 173, 232, 44, 215, 117, 122, 235, 22, 11, 245, 89, 203, 95, 176, 156, 169, 81, 160, 127, 12, 246, 111, 23, 196, 73, 236, 216, 67, 31, 45, 164, 118, 123, 183, 204, 187, 62, 90, 251, 96, 177, 134, 59, 82, 161, 108, 170, 85, 41, 157, 151, 178, 135, 144, 97, 190, 220, 252, 188, 149, 207, 205, 55, 63, 91, 209, 83, 57, 132, 60, 65, 162, 109, 71, 20, 42, 158, 93, 86, 242, 211, 171, 68, 17, 146, 217, 35, 32, 46, 137, 180, 124, 184, 38, 119, 153, 227, 165, 103, 74, 237, 222, 197, 49, 254, 24, 13, 99, 140, 128, 192, 247, 112, 7}
	return log
}

func getExp() []byte {
	exp := []byte{1, 3, 5, 15, 17, 51, 85, 255, 26, 46, 114, 150, 161, 248, 19, 53, 95, 225, 56, 72, 216, 115, 149, 164, 247, 2, 6, 10, 30, 34, 102, 170, 229, 52, 92, 228, 55, 89, 235, 38, 106, 190, 217, 112, 144, 171, 230, 49, 83, 245, 4, 12, 20, 60, 68, 204, 79, 209, 104, 184, 211, 110, 178, 205, 76, 212, 103, 169, 224, 59, 77, 215, 98, 166, 241, 8, 24, 40, 120, 136, 131, 158, 185, 208, 107, 189, 220, 127, 129, 152, 179, 206, 73, 219, 118, 154, 181, 196, 87, 249, 16, 48, 80, 240, 11, 29, 39, 105, 187, 214, 97, 163, 254, 25, 43, 125, 135, 146, 173, 236, 47, 113, 147, 174, 233, 32, 96, 160, 251, 22, 58, 78, 210, 109, 183, 194, 93, 231, 50, 86, 250, 21, 63, 65, 195, 94, 226, 61, 71, 201, 64, 192, 91, 237, 44, 116, 156, 191, 218, 117, 159, 186, 213, 100, 172, 239, 42, 126, 130, 157, 188, 223, 122, 142, 137, 128, 155, 182, 193, 88, 232, 35, 101, 175, 234, 37, 111, 177, 200, 67, 197, 84, 252, 31, 33, 99, 165, 244, 7, 9, 27, 45, 119, 153, 176, 203, 70, 202, 69, 207, 74, 222, 121, 139, 134, 145, 168, 227, 62, 66, 198, 81, 243, 14, 18, 54, 90, 238, 41, 123, 141, 140, 143, 138, 133, 148, 167, 242, 13, 23, 57, 75, 221, 124, 132, 151, 162, 253, 28, 36, 108, 180, 199, 82, 246, 1, 3, 5, 15, 17, 51, 85, 255, 26, 46, 114, 150, 161, 248, 19, 53, 95, 225, 56, 72, 216, 115, 149, 164, 247, 2, 6, 10, 30, 34, 102, 170, 229, 52, 92, 228, 55, 89, 235, 38, 106, 190, 217, 112, 144, 171, 230, 49, 83, 245, 4, 12, 20, 60, 68, 204, 79, 209, 104, 184, 211, 110, 178, 205, 76, 212, 103, 169, 224, 59, 77, 215, 98, 166, 241, 8, 24, 40, 120, 136, 131, 158, 185, 208, 107, 189, 220, 127, 129, 152, 179, 206, 73, 219, 118, 154, 181, 196, 87, 249, 16, 48, 80, 240, 11, 29, 39, 105, 187, 214, 97, 163, 254, 25, 43, 125, 135, 146, 173, 236, 47, 113, 147, 174, 233, 32, 96, 160, 251, 22, 58, 78, 210, 109, 183, 194, 93, 231, 50, 86, 250, 21, 63, 65, 195, 94, 226, 61, 71, 201, 64, 192, 91, 237, 44, 116, 156, 191, 218, 117, 159, 186, 213, 100, 172, 239, 42, 126, 130, 157, 188, 223, 122, 142, 137, 128, 155, 182, 193, 88, 232, 35, 101, 175, 234, 37, 111, 177, 200, 67, 197, 84, 252, 31, 33, 99, 165, 244, 7, 9, 27, 45, 119, 153, 176, 203, 70, 202, 69, 207, 74, 222, 121, 139, 134, 145, 168, 227, 62, 66, 198, 81, 243, 14, 18, 54, 90, 238, 41, 123, 141, 140, 143, 138, 133, 148, 167, 242, 13, 23, 57, 75, 221, 124, 132, 151, 162, 253, 28, 36, 108, 180, 199, 82, 246, 0, 0}
	return exp
}

func add(a byte, b byte) byte {
	return a ^ b
}

func sub(a byte, b byte) byte {
	return add(a, b)
}

func mul(a byte, b byte) byte {
	if a != byte(0) && b != byte(0) {
		return EXP[int(LOG[int(a)])+int(LOG[int(b)])]
	} else {
		return byte(0)
	}
}

func div(a byte, b byte) byte {
	return mul(a, EXP[255-int(LOG[int(b)])])
}

func eval(p []byte, x byte) byte {
	result := byte(0)

	for i := (len(p) - 1); i >= 0; i-- {
		result = add(mul(result, x), p[i])
	}
	return result
}

func degree(p []byte) int {
	for i := len(p) - 1; i >= 1; i -= i {
		if p[i] != 0 {
			return i
		}
	}
	return 0
}

func generate(de int, x byte) []byte {
	b := make([]byte, de+1)
	for {
		rand.Read(b)
		if degree(b) == de {
			break
		}
	}
	b[0] = x
	return b
}

func interpolate(points [][]byte) byte {
	x := byte(0)
	y := byte(0)

	for i := 0; i < len(points); i++ {
		aX := points[i][0]
		aY := points[i][1]
		li := byte(1)

		for j := 0; j < len(points); j++ {
			bX := points[j][0]
			if i != j {
				li = mul(li, div(sub(x, bX), sub(aX, bX)))
			}
		}
		y = add(y, mul(li, aY))
	}
	return y
}

func Split(secret []byte, n int, k int) map[int][]byte {
	values := make([][]byte, n)
	for i := range values {
		values[i] = make([]byte, len(secret))
	}
	//var values [n][len(secret)]byte
	for i := 0; i < len(secret); i++ {
		p := generate(k-1, secret[i])
		for x := 1; x <= n; x++ {
			values[x-1][i] = eval(p, byte(x))
		}
	}

	outMap := make(map[int][]byte)

	for i := 0; i < len(values); i++ {
		outMap[i+1] = values[i]
	}
	return outMap
}

func Join(parts map[int][]byte) ([]byte, error) {
	if len(parts) == 0 {
		return nil, errors.New("No parts provided")
	}
	lengths := varyingPartValue(parts)
	if len(lengths) > 1 {
		return nil, errors.New("Varying lengths of part values")
	}
	secret := make([]byte, lengths[0])
	for i := 0; i < len(secret); i++ {
		points := make([][]byte, len(parts))
		for i := range points {
			points[i] = make([]byte, 2)
		}
		j := 0
		for k, v := range parts {
			points[j][0] = byte(k)
			points[j][1] = v[i]
			j++
		}
		secret[i] = interpolate(points)
	}
	return secret, nil
}

func varyingPartValue(parts map[int][]byte) []int {
	lengths := make([]int, len(parts))
	i := 0
	for _, v := range parts {
		lengths[i] = len(v)
		i++
	}
	return removeDuplicate(lengths)
}

func removeDuplicate(v []int) []int {
	toIndex := 0
	p := 0
	for i, _ := range v {
		c := &v[i]
		if p == *c && i != 0 {
			continue
		}
		if i != toIndex {
			v[toIndex] = *c
		}
		toIndex++
		p = *c
	}
	return v[:toIndex]
}
